{"version":3,"sources":["Components/UX/TextFields.js","Components/UX/Buttons.js","Environment/Environment.js","Components/Pages/Login.js","Components/Pages/List.js","Components/Pages/Create.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","margin","spacing","textField","flexBasis","TextFieldComponent","props","classes","adornmentEnum","username","password","name","job","payments","Object","freeze","Fragment","TextField","id","type","className","clsx","variant","label","onChange","event","getValue","target","value","InputProps","startAdornment","InputAdornment","position","ButtonComponent","Button","color","onClick","clickButton","size","BASE_URL","paper","padding","textAlign","palette","text","secondary","display","header","fontWeight","marginBottom","alignCenter","LoginComponent","React","useState","setUsername","setPassword","a","loginDetails","email","fetch","method","headers","body","JSON","stringify","status","getList","Grid","container","direction","alignItems","justify","item","xs","Paper","user","pass","root","width","maxWidth","backgroundColor","background","inline","ListComponent","handleDeleteClicked","deleteData","Number","parseInt","currentTarget","List","data","map","key","ListItem","ListItemAvatar","Avatar","alt","src","avatar","ListItemText","primary","Typography","component","first_name","last_name","ListItemSecondaryAction","IconButton","edge","aria-label","Divider","CreateComponent","setName","setJob","setData","isEditTrue","setEditTrue","editId","setEditId","response","json","then","newData","concat","index","indexOf","slice","handleEditClicked","editListMode","listMode","createdAt","updatedAt","App","loggedIn","setLoggedIn","flag","filter","basename","process","to","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7aea8d1d.chunk.js","sourcesContent":["import React from \"react\";\nimport clsx from \"clsx\";\nimport { TextField } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1)\n  },\n  textField: {\n    flexBasis: 200\n  }\n}));\n\n///Summary\n///TextField component which implements the Material UI Textfield\nexport default function TextFieldComponent(props) {\n  const classes = useStyles();\n\n  //event handler to handle change in value of textbox by user\n  //it passes the value to event handler present in the parent\n  const handleInputChange = event => {\n    props.getValue(event.target.value);\n  };\n  //Enum to handle the Symbols for each type of TextField\n  const adornmentEnum = {\n    username: \"$\",\n    password: \"M\",\n    name: \"â„›\",\n    job: \"$\",\n    payments: \" \"\n  };\n  //Used Freeze function to prevent enum from modifying\n  Object.freeze(adornmentEnum);\n\n  return (\n    <React.Fragment>\n      <TextField\n        id={`filled-adornment-${props.type}`}\n        type={props.type}\n        className={clsx(classes.margin, classes.textField)}\n        variant=\"filled\"\n        label={props.label}\n        onChange={handleInputChange}\n        //disabled={props.disabled}\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              {adornmentEnum[props.type]}\n            </InputAdornment>\n          )\n        }}\n      />\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1)\n  },\n}));\n\nexport default function ButtonComponent(props) {\n\n  const handleClick = () => {\n    props.clickButton();\n  }\n\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <Button\n        className={classes.margin}\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={handleClick}\n        size=\"small\"\n      >\n        {props.type}\n      </Button>\n    </React.Fragment>\n  );\n}\n","export const BASE_URL = \"https://reqres.in/api/\";","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"../UX/TextFields\";\nimport Button from \"../UX/Buttons\";\nimport { BASE_URL } from \"../../Environment/Environment\";\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n    display: \"flex\"\n  },\n  margin: {\n    margin: theme.spacing(1)\n  },\n  header: {\n    fontWeight: \"bold\",\n    marginBottom: \"10px\",\n    textAlign: \"center\"\n  },\n  alignCenter: {\n    textAlign: \"center\"\n  }\n}));\n\nexport default function LoginComponent(props) {\n  const [username, setUsername] = React.useState();\n  const [password, setPassword] = React.useState();\n\n  const getUsername = user => {\n    setUsername(user);\n  };\n\n  const getPassword = pass => {\n    setPassword(pass);\n  };\n\n  async function loginClicked() {\n    let loginDetails = {\n      email: username,\n      password: password\n    };\n    const response = await fetch(`${BASE_URL}login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(loginDetails)\n    });\n    if (response.status === 200) {\n      props.getList(true);\n    }\n  }\n\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <Grid\n        container\n        direction=\"column\"\n        alignItems=\"center\"\n        justify=\"center\"\n      >\n        <Grid item xs={4}>\n          <Paper className={clsx(classes.paper, classes.header)}>\n            <span className={clsx(classes.alignCenter)}>CRUD APPLICATION</span>\n          </Paper>\n          {/* </Grid>\n        <Grid item xs={6}> */}\n          <Paper className={clsx(classes.paper, classes.header)}>\n            <TextField\n              label=\"Username\"\n              type=\"username\"\n              getValue={getUsername}\n            />\n            <TextField\n              label=\"Password\"\n              type=\"password\"\n              getValue={getPassword}\n            />\n            <Button type=\"Login\" clickButton={loginClicked} />\n          </Paper>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n  inline: {\r\n    display: \"inline\"\r\n  }\r\n}));\r\n\r\nexport default function ListComponent(props) {\r\n  const classes = useStyles();\r\n\r\n  const handleDeleteClicked = event => {\r\n    props.deleteData(Number.parseInt(event.currentTarget.id));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n        <List className={classes.root}>\r\n          {props.data.map(value => {\r\n            return (\r\n              <div key={value.id}>\r\n                <ListItem alignItems=\"flex-start\">\r\n                  <ListItemAvatar>\r\n                    <Avatar alt=\"No Image\" src={value.avatar} />\r\n                  </ListItemAvatar>\r\n                  <ListItemText\r\n                    primary={value.id}\r\n                    secondary={\r\n                      <React.Fragment>\r\n                        <Typography\r\n                          component=\"span\"\r\n                          variant=\"body2\"\r\n                          className={classes.inline}\r\n                          color=\"textPrimary\"\r\n                        >\r\n                          {value.first_name} {value.last_name}\r\n                        </Typography>\r\n                        {` ${value.email}`}\r\n                      </React.Fragment>\r\n                    }\r\n                  />\r\n                  <ListItemSecondaryAction>\r\n                    <IconButton\r\n                      id={value.id}\r\n                      edge=\"end\"\r\n                      aria-label=\"delete\"\r\n                      onClick={handleDeleteClicked}\r\n                    >\r\n                      <DeleteIcon />\r\n                    </IconButton>\r\n                  </ListItemSecondaryAction>\r\n                </ListItem>\r\n                <Divider variant=\"inset\" component=\"li\" />\r\n              </div>\r\n            );\r\n          })}\r\n        </List>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport TextField from \"../UX/TextFields\";\r\nimport Button from \"../UX/Buttons\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { BASE_URL } from \"../../Environment/Environment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n    display: \"flex\"\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1)\r\n  },\r\n  header: {\r\n    fontWeight: \"bold\",\r\n    marginBottom: \"10px\",\r\n    textAlign: \"center\"\r\n  },\r\n  alignCenter: {\r\n    textAlign: \"center\"\r\n  },\r\n  root: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n  inline: {\r\n    display: \"inline\"\r\n  }\r\n}));\r\n\r\nexport default function CreateComponent(props) {\r\n  const classes = useStyles();\r\n  const [name, setName] = React.useState();\r\n  const [job, setJob] = React.useState();\r\n  const [data, setData] = React.useState([]);\r\n  const [isEditTrue, setEditTrue] = React.useState(false);\r\n  const [editId, setEditId] = React.useState();\r\n\r\n  const getName = name => {\r\n    setName(name);\r\n  };\r\n\r\n  const getJob = job => {\r\n    setJob(job);\r\n  };\r\n\r\n  async function createUser() {\r\n    let user = {\r\n      name: name,\r\n      job: job\r\n    };\r\n    const response = await fetch(`${BASE_URL}users`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(user)\r\n    });\r\n    if (response.status === 201) {\r\n      response.json().then(response => {\r\n        let newData = data.concat(response);\r\n        setData(newData);\r\n      });\r\n    }\r\n  }\r\n\r\n  async function editUser() {\r\n    let user = {\r\n      name: name,\r\n      job: job\r\n    };\r\n    const response = await fetch(`${BASE_URL}users/${editId}`, {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(user)\r\n    });\r\n    if (response.status === 200) {\r\n      response.json().then(response => {\r\n        response.id = editId;\r\n        const index = data\r\n          .map(value => Number.parseInt(value.id))\r\n          .indexOf(editId);\r\n        let newData = data.slice();\r\n        newData[index] = response;\r\n        setData(newData);\r\n        setEditTrue(false);\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleEditClicked = event => {\r\n    setEditTrue(true);\r\n    setEditId(Number.parseInt(event.currentTarget.id));\r\n  };\r\n\r\n  const editListMode = (\r\n    <React.Fragment>\r\n      <Paper className={clsx(classes.paper, classes.header)}>\r\n        <TextField label=\"Name\" type=\"name\" getValue={getName} />\r\n        <TextField label=\"Job\" type=\"job\" getValue={getJob} />\r\n        <Button type=\"Edit User\" clickButton={editUser} />\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const listMode = (\r\n    <React.Fragment>\r\n      <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n        {data ? (\r\n          <Paper className={clsx(classes.paper, classes.header)}>\r\n            <List className={classes.root}>\r\n              {data.map(value => {\r\n                return (\r\n                  <div key={value.id}>\r\n                    <ListItem alignItems=\"flex-start\">\r\n                      <ListItemText\r\n                        primary={value.name}\r\n                        secondary={\r\n                          <React.Fragment>\r\n                            <Typography\r\n                              component=\"span\"\r\n                              variant=\"body2\"\r\n                              className={classes.inline}\r\n                              color=\"textPrimary\"\r\n                            >\r\n                              {`${value.job}`}\r\n                            </Typography>\r\n                            {`- ${\r\n                              value.createdAt\r\n                                ? value.createdAt\r\n                                : value.updatedAt\r\n                            }`}\r\n                          </React.Fragment>\r\n                        }\r\n                      />\r\n                      <ListItemSecondaryAction>\r\n                        <IconButton\r\n                          id={value.id}\r\n                          edge=\"end\"\r\n                          aria-label=\"delete\"\r\n                          onClick={handleEditClicked}\r\n                        >\r\n                          <EditIcon />\r\n                        </IconButton>\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    <Divider variant=\"inset\" component=\"li\" />\r\n                  </div>\r\n                );\r\n              })}\r\n            </List>\r\n          </Paper>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n        <Grid item xs={4}>\r\n          <Paper className={clsx(classes.paper, classes.header)}>\r\n            <TextField label=\"Name\" type=\"name\" getValue={setName} />\r\n            <TextField label=\"Job\" type=\"job\" getValue={setJob} />\r\n            <Button type=\"Create User\" clickButton={createUser} />\r\n          </Paper>\r\n          {isEditTrue ? editListMode : listMode}\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\nimport LoginComponent from \"./Components/Pages/Login\";\nimport ListComponent from \"./Components/Pages/List\";\nimport CreateComponent from \"./Components/Pages/Create\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  NavLink,\n  Redirect\n} from \"react-router-dom\";\nimport { BASE_URL } from \"./Environment/Environment\";\nimport Grid from \"@material-ui/core/Grid\";\n\n//import createBrowserHistory from 'history/createBrowserHistory';\n\nfunction App(props) {\n  const [loggedIn, setLoggedIn] = React.useState(false);\n  const [data, setData] = React.useState();\n\n  async function getList(flag) {\n    if (flag) {\n      const response = await fetch(`${BASE_URL}users?page=2`);\n      response.json().then(response => {\n        setData(response.data);\n        setLoggedIn(flag);\n      });\n    }\n  }\n\n  async function deleteData(id) {\n    const response = await fetch(`${BASE_URL}users/${id}`, {\n      method: \"DELETE\"\n    });\n    if (response.status === 204) {\n      setData(\n        data.filter(value => {\n          return value.id !== id;\n        })\n      );\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <LoginComponent getList={getList} />\n      <Router basename={process.env.PUBLIC_URL}>\n        <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\n          {loggedIn ? (\n            <React.Fragment>\n              <NavLink to=\"/list\">List</NavLink>\n              <NavLink to=\"/create\">Create User</NavLink>\n            </React.Fragment>\n          ) : (\n            \"\"\n          )}\n        </Grid>\n        <Route\n          path=\"/list\"\n          exact\n          render={() =>\n            loggedIn ? (\n              <ListComponent deleteData={deleteData} data={data} />\n            ) : (\n              <Redirect to=\"/\" />\n            )\n          }\n        ></Route>\n\n        <Route\n          path=\"/create\"\n          exact\n          render={() =>\n            loggedIn ? (\n              <CreateComponent deleteData={deleteData} data={data} />\n            ) : (\n              <Redirect to=\"/\" />\n            )\n          }\n        ></Route>\n      </Router>\n    </React.Fragment>\n  );\n}\n\n//(\n//loggedIn ? (<ListComponent />) : (<Redirect to=\"/\"/>)\n//{/* {loggedIn ? <ListComponent deleteData={deleteData} data={data} /> : \"\"} */}\n//{/* {loggedIn ? <CreateComponent /> : \"\"} */}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}